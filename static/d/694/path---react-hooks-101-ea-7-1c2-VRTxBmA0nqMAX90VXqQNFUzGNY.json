{"data":{"site":{"siteMetadata":{"title":"William Lindner, 2 n's","author":"William Lindner"}},"markdownRemark":{"id":"55e25dff-cf36-54f8-9609-53ae6d470ae7","html":"<p>The React team recently announced a new feature of React called Hooks. The key benefit of this new feature is bringing state to React components written as functions, also known as <a href=\"https://reactjs.org/docs/components-and-props.html#function-and-class-components\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">function components</a>. Previously, only class components could store state. Which lead to an awkward tradeoff between deciding to have less boilerplate of function components and the necessary power of UI state from class components. This tradeoff is no longer required for React, and React Hooks provide the ability to keep state around, even if your component is a function. Not only that, but your state code is no longer “glued” into your class component, but is simply another function that is called from your component. Making it possible to extract it to separate files and share that code between components. Your components shrink, and you have more flexibility about how the code you have gets organized. This was illustrated nicely by this tweet by Sunil Pai.</p>\n<div class=\"center\">\n<blockquote class=\"twitter-tweet\" data-lang=\"en\"><p lang=\"en\" dir=\"ltr\">ok so - I took dan&#39;s classes/hooks code from react conf, blacked out the &#39;unnecessary&#39; bits, then colour coded bits by &#39;concern&#39;. so much nicer. the effect is amplified in more complex components, where concerns are split and mixed across lifecycle methods. <a href=\"https://t.co/nPUzQcisFt\">pic.twitter.com/nPUzQcisFt</a></p>&mdash; Sunil Pai (@threepointone) <a href=\"https://twitter.com/threepointone/status/1056594421079261185?ref_src=twsrc%5Etfw\">October 28, 2018</a></blockquote>\n</div>","frontmatter":{"title":"React Hooks 101","date":"February 02, 2019"}}},"pageContext":{"slug":"/react-hooks-101/"}}